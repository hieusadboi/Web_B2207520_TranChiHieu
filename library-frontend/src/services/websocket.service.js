// services/WebSocketService.js

class WebSocketService {
  constructor(url) {
    this.url = url; // URL c·ªßa WebSocket server
    this.ws = null; // Bi·∫øn ch·ª©a k·∫øt n·ªëi WebSocket
    this.listeners = [];; // M·∫£ng ch·ª©a c√°c callback x·ª≠ l√Ω tin nh·∫Øn
  }

  // K·∫øt n·ªëi ƒë·∫øn WebSocket server
  connect() {
    if (this.ws) {
      console.warn('WebSocket is already connected.');
      return;
    }

    this.ws = new WebSocket(this.url);

    // Khi k·∫øt n·ªëi WebSocket th√†nh c√¥ng
    this.ws.onopen = () => {
      console.log('WebSocket connection established');
    };

    // Khi nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn t·ª´ server
    this.ws.onmessage = async (event) => {
      try{
          if (event.data instanceof Blob) {  
              // üõ† Chuy·ªÉn Blob th√†nh text tr∆∞·ªõc khi parse JSON
              const text = await event.data.text();
              try {
                  const message = JSON.parse(text);  // Chuy·ªÉn th√†nh JSON
                  console.log("üì• Nh·∫≠n d·ªØ li·ªáu:", message);
              } catch (error) {
                  console.error("‚ùå JSON.parse l·ªói:", error);
              }
          } else {
              // N·∫øu kh√¥ng ph·∫£i Blob, x·ª≠ l√Ω nh∆∞ b√¨nh th∆∞·ªùng
              try {
                  const message = JSON.parse(event.data);
                  console.log("üì• Nh·∫≠n d·ªØ li·ªáu:", message);
              } catch (error) {
                  console.error("‚ùå JSON.parse l·ªói:", error);
              }
          }
        }catch(error){
          console.error("‚ùå L·ªói khi parse JSON:", error);
        }
      };


    // Khi WebSocket b·ªã ƒë√≥ng
    this.ws.onclose = () => {
      console.log('WebSocket connection closed');
    };

    // Khi c√≥ l·ªói x·∫£y ra
    this.ws.onerror = (error) => {
      console.error('WebSocket error: ', error);
    };
  }

  // G·ª≠i tin nh·∫Øn ƒë·∫øn WebSocket server
  sendMessage(message) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify( message)); // ‚úÖ JSON h·ª£p l·ªá
      console.log('Sent message: ', message);
    } else {
      console.error('WebSocket is not open');
    }
  }

  // ƒêƒÉng k√Ω c√°c callback ƒë·ªÉ x·ª≠ l√Ω c√°c tin nh·∫Øn t·ª´ server
  onMessage(callback) {
    if (this.ws) {
      this.ws.onmessage = (event) => {
        callback(event.data); // G·ªçi callback khi c√≥ tin nh·∫Øn
      };
    } else {
      console.error('WebSocket is not connected');
    }
  }

  addListener(listener) {
    if (typeof listener === 'function') {
      this.listeners.push(listener);  // Th√™m listener v√†o m·∫£ng
    } else {
      console.error('Listener must be a function');
    }
  }

  // ƒê√≥ng k·∫øt n·ªëi WebSocket
  close() {
    if (this.ws) {
      this.ws.close();
    }
  }
}

export default WebSocketService;
